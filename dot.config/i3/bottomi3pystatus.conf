#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
import subprocess
import requests

from i3pystatus import Status, IntervalModule
from i3pystatus.iinet import IINet
from i3pystatus.updates import pacman, cower

wifi_card = 'wlp0s20f3'

status = Status()

foreground = "#C678FF"

__author__ = 'chestm007'

class Light(IntervalModule):
    """
    Get keyboard and screen backlight values from `light` binary.
    Requires `light` (binary) available from the AUR

    Formatters:

    * `{screen_brightness}`        â€” screen brightness value
    * `{keyboard_brightness}`   â€” keyboard brightness value
    """
    
    keyboard = 'sysfs/leds/rgb:kbd_backlight'
    backlight = 'sysfs/backlight/intel_backlight'

    color = None
    format = '{screen_brightness}'
    settings = (
            'format', 
            'color'
            )

    def init(self):
        self.screen_brightness = None
        self.keyboard_brightness = None

    def run(self):

        self.screen_brightness = self.run_cmd('-G', self.backlight)
        self.keyboard_brightness = self.run_cmd('-G', self.keyboard)

        self.output = dict(
            full_text=self.format.format(**vars(self)),
            color = self.color
        )

    def run_cmd(self, *cmds):
        _cmds = ['light']
        _cmds.extend(cmds)
        val = subprocess.check_output(_cmds)

        if val:
            return val.strip().decode('UTF-8').split('.')[0]
        return 'error'

status.register(
    "updates",
    format="Updates: {count}",
    format_no_updates="",
    on_leftclick="termite --geometry=1200x600 --title=updates -e "
                 "'pacaur --needed --noconfirm --noedit -Syu'",
    backends=[pacman.Pacman(), cower.Cower()],
    interval=60
)

status.register(
    "clock",
    format="%d/%m  %H:%M",
    color=foreground,
    interval=60,
    on_leftclick="/usr/bin/gsimplecal"
)

status.register(
    "pulseaudio",
    color_unmuted=foreground,
    color_muted='#E06C75',
    format_muted='[muted]',
    format="ðŸ”Š{volume}%"
)

status.register(
    "network",
    interface=wifi_card,
    color_up=foreground,
    color_down="#EF2929",
    format_up="{essid} {quality:.0f}%",
    format_down="NO WIFI",
    interval=30
)

status.register(
    "battery",
    battery_ident="BAT0",
    interval=5,
    format="âš¡{status}{percentage:.0f}% {remaining}",
    alert_percentage=15,
    color=foreground,
    critical_color="#FF0044",
    charging_color="#CC33FF",
    full_color=foreground,
    status=dict(
        DIS="D",
        CHR="C",
        FULL="F",
    )
)

status.register(
    "cpu_usage",
    on_leftclick="termite --title=htop -e 'htop'",
    color=foreground,
    format="CPU {usage}%"
)

status.register(
    Light,
    format='ðŸ’»{screen_brightness}% | âŒ¨{keyboard_brightness}%',
    color=foreground,
    interval=10
)

status.run()
