#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
import subprocess
import requests
import yaml

from i3pystatus import Status, IntervalModule
from i3pystatus.iinet import IINet
from i3pystatus.updates import pacman, cower
from i3pystatus.mail import imap

with open('/home/max/.secrets/i3pystatus.yml') as f:
    secrets = yaml.load(f)
    
wifi_card = 'wlp4s0'

status = Status()


__author__ = 'chestm007'

class Light(IntervalModule):
    """
    Get keyboard and screen backlight values from `light` binary.
    Requires `light` (binary)

    Formatters:

    * `{screen_brightness}`        — screen brightness value
    * `{keyboard_brightness}`   — keyboard brightness value
    """
    format = '{screen_brightness}/{keyboard_brightness}'
    settings = ('format', )

    def init(self):
        self.screen_brightness = None
        self.keyboard_brightness = None

    def run(self):
        def verify(val):
            if val:
                return val.strip().decode('UTF-8').split('.')[0]
            return 'error'
        self.screen_brightness = verify(subprocess.check_output("light"))

        self.keyboard_brightness = verify(subprocess.check_output(['light', '-k']))
        self.output = dict(full_text=self.format.format(**vars(self)))


status.register(
    "updates",
    format="Updates: {count}",
    format_no_updates="",
    on_leftclick="termite --geometry=1200x600 --title=updates -e "
                 "'pacaur --needed --noconfirm --noedit -Syu'",
    backends=[pacman.Pacman(), cower.Cower()]
)

status.register(
    "clock",
    format="%d/%m  %H:%M",
    color='#C678DD',
    interval=1,
    on_leftclick="/usr/bin/gsimplecal"
)

status.register(
    "pulseaudio",
    color_unmuted='#98C379',
    color_muted='#E06C75',
    format_muted='[muted]',
    format="VOL {volume}%"
)

status.register(
    "network",
    interface=wifi_card,
    color_up="#8AE234",
    color_down="#EF2929",
    format_up="{essid} {quality:.0f}%",
    format_down="NO WIFI"
)


status.register(
    "battery",
    battery_ident="BAT1",
    interval=5,
    format="BAT(EX) {status} {percentage:.0f}% {remaining}",
    alert_percentage=15,
    color="#FFFFFF",
    critical_color="#FF1919",
    charging_color="#E5E500",
    full_color="#D19A66",
    status=dict(
        DIS="D",
        CHR="C",
        FULL="F",
    )
)

status.register(
    "battery",
    battery_ident="BAT0",
    interval=5,
    format="BAT(IN) {status} {percentage:.0f}% {remaining}",
    alert_percentage=15,
    color="#FFFFFF",
    critical_color="#FF1919",
    charging_color="#E5E500",
    full_color="#D19A66",
    status=dict(
        DIS="D",
        CHR="C",
        FULL="F",
    )
)

status.register(
    "cpu_usage",
    on_leftclick="termite --title=htop -e 'htop'",
    format="CPU {usage}%"
)

status.register(
    Light,
    format='Backlight S{screen_brightness}%| K{keyboard_brightness}%',
    interval=10
)

status.register(
    "mail",
    hide_if_null=False,
    backends=[
        imap.IMAP(
            account='Hotmail',
            host="imap-mail.outlook.com", port=993, ssl=True,
            username='chestm007@hotmail.com',
            password=secrets['mail']['chestm007.hotmail.com']
        ),
        imap.IMAP(
            account='Instac',
            host='imap.gmail.com', port=993, ssl=True,
            password=secrets['mail']['max.instaclustr.com'],
            username='max@instaclustr.com'
        )
    ]
)

status.run()
